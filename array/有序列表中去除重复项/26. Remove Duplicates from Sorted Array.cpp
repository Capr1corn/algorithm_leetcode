/*
给定一个有序数组，你需要原地删除其中的重复内容，使每个元素只出现一次,并返回新的长度。

不要另外定义一个数组，您必须通过用 O(1) 额外内存原地修改输入的数组来做到这一点。

示例：

给定数组: nums = [1,1,2],

你的函数应该返回新长度 2, 并且原数组nums的前两个元素必须是1和2
不需要理会新的数组长度后面的元素


解题思路：
，我们使用快慢指针来记录遍历的坐标，
最开始时两个指针都指向第一个数字，
如果两个指针指的数字相同，则快指针向前走一步，
如果不同，则两个指针都向前走一步，
这样当快指针走完整个数组后，慢指针当前的坐标加1就是数组中不同数字的个数，代码如下

*/


//实现代码


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.empty()) return 0;
        int pre=0,cur=0,n=nums.size();
        //快慢指针，快指针为cur,慢指针为pre
        while(cur<n){
            if(nums[pre]==nums[cur])++cur;
            //如果存在前后相等，则只让当快指针向后移动，不移动慢指针
            else nums[++pre]=nums[cur++];
            //否则均向后移动
            
        }
        
        return pre+1;
    }
};